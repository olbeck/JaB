[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/jab-regression.html","id":"detecting-outliers-and-influential-points-in-linear-regression","dir":"Articles","previous_headings":"","what":"Detecting Outliers and Influential Points in Linear Regression","title":"Jackknife-after-Bootstrap for Linear Regression","text":"vignette, use linear regression model \\(n\\) observations \\(p\\) predictors: \\[\\boldsymbol{Y} = \\boldsymbol{X}\\beta + \\boldsymbol{\\epsilon}\\] \\(\\boldsymbol{Y} \\\\mathbb{R}^{n \\times 1}\\) vector responses, \\(\\boldsymbol{X} \\\\mathbb{R}^{n\\times p}\\) full rank design matrix \\(p\\) predictors, \\(\\beta \\\\mathbb{R}^{p\\times 1}\\) vector parameters, \\(\\boldsymbol{\\epsilon}\\\\mathbb{R}^{n\\times 1}\\) vector Normal, ..d. errors. define several useful values Belsley, Kuh, Welsch (2005) Beyaztas Alin (2013), next define influence statistics traditional cut values Belsley, Kuh, Welsch (2005) Beyaztas Alin (2013), \\[ \\begin{align*} LD_i &= 2[\\ell(\\hat{\\beta}) - \\ell(\\hat{\\beta}_{()}) ]\\\\ & = n \\log\\left[\\left(\\frac{n}{n-1}\\right)\\left( \\frac{n-p-1}{t_i^{*2} + n -p - 1}\\right)\\right] \\\\ & \\;\\;\\;\\;+ \\frac{t_i^{*2}(n-1)}{(1-h_{ii})(n-p-1)}-1 \\end{align*} \\] \\(\\ell\\) log-likelihood function.","code":""},{"path":"/articles/jab-regression.html","id":"jackknife-after-bootstrap","dir":"Articles","previous_headings":"","what":"Jackknife-after-Bootstrap","title":"Jackknife-after-Bootstrap for Linear Regression","text":"goal determine \\(^{\\text{th}}\\) observation influential given influence statistic. JaB algorithm generates “null distribution” influence statistics assumption observation consideration influential. idea original influence statistic observation \\(\\) extreme value “null distribution”, flagged influential. One way generating distribution considering bootstrap samples observation \\(\\) present. observation \\(\\) bootstrap sample, influential model estimated bootstrap sample. JaB algorithm detecting influential observations linear regression proposed Martin Roberts (2010) follows: Step 1: Let \\(\\gamma_i\\) diagnostic statistic interest. Fit model \\(M\\) calculate \\(\\gamma_i\\) \\(=1,…,n\\). Step 2: Construct \\(B\\) bootstrap samples, replacement, original data set. Step 3: \\(= 1,…,n\\) , Let \\(B_{()}\\) set bootstrap samples contain data point \\(\\). sample \\(B_{()}\\), fit regression model calculate \\(n\\) values \\(\\gamma_{, (b)}\\). Aggregate one vector \\(\\Gamma_i\\) . Calculate suitable quantiles \\(\\Gamma_i\\) (say 0.025 0.975). \\(\\gamma_i\\) outside range, flag point \\(\\) influential.","code":""},{"path":"/articles/jab-regression.html","id":"toy-example","dir":"Articles","previous_headings":"","what":"Toy Example","title":"Jackknife-after-Bootstrap for Linear Regression","text":"Let’s look example JaB algorithm works simple linear regression originally included Martin Roberts (2010). base model \\[ Y = 1 + 2X + \\epsilon \\] \\(p=2\\) \\(n=20\\) . generate \\(X_i \\overset{iid}{\\sim} \\text{N}(2,1)\\) \\(\\epsilon_i \\overset{iid}{\\sim} N(0, 0.5625)\\) estimate linear regression model. plot 20 points fitted line blue.  Next, deliberately add influential point (5, 2) check JaB algorithm can detect . point added red red line fitted line \\(n=21\\) linear model.  fit regression model 21 points use jab_lm function run JaB algorithm DFFITS, 3100 bootstrap sample, quantile cutoffs 0.025 0.975. Finally, look points JaB algorithm flagged influential. jab_lm function outputs table row index observation, lower upper cutoff values, original statistic, indicator observation flagged influential. can see output inserted point flagged original DFFITS value -7.7 lower cutoff -0.68. can also look average cutoff values original 20 points see different cutoff value 21\\(^{\\text{st}}\\) point. averages quite different cutoff 21\\(^{\\text{st}}\\) point, suggesting point 21 influential. can also directly visualize cutoff values JaB algorithm point. plot , point data set plot original DFFITS value line lower upper cutoff values. point within line, flagged influential (colored red), point outside line flagged influential (colored blue). can see plot point 21 one flagged influential. can also see cutoff values point 21 quite different first 20 points.","code":"set.seed(540) n <- 20 p <- 2  #Y = 1 + 2X + e beta_0 <- 1 beta_1 <- 2  X <- rnorm(n, 2, 1) e_norm <- rnorm(n, 0, sd = 0.5625^(1/2)) Y <- beta_0 + beta_1*X + e_norm  dat_orig <- data.frame(X, Y)  plot.orig <-    ggplot() +   geom_point(data = dat_orig, aes(x=X,y=Y), color = \"blue\") +   geom_smooth(data = dat_orig, aes(x=X,y=Y), method='lm', formula= y~x, se = F) plot.orig +   theme_minimal() #add Influential Point n <- n+1 Y1 <- c(Y, 2) X <- c(X, 5)  dat_new <-  data.frame(X,Y1)  plot.orig +   geom_point(data = data.frame(x=5, y=2), aes(x=x,y=y), color = \"red\")  +   geom_smooth(data = dat_new, aes(x=X,y=Y1), method='lm', formula= y~x, se = F, color = \"red\") +   theme_minimal()+   ylab(\"Y\") mod1 <- lm(Y1 ~ X, data = dat_new) result1 <- jab_lm(mod1,                    stat = \"dffits\",                    quant.lower = 0.025,                    quant.upper = 0.975,                   B=3100) result1[result1$influential, ]  #>    row.ID      lower     upper      orig influential #> 21     21 -0.6799764 0.7851924 -7.704647        TRUE result1 %>%    filter(row.ID != 21) %>%    summarise(lower.avg = mean(lower),             upper.avg = mean(upper),             mean.dffits = mean(orig))  #>   lower.avg upper.avg mean.dffits #> 1 -1.637976 0.6117787  0.04061036 result1 %>%    ggplot() +   geom_segment(aes(x = row.ID, y = lower, yend = upper), color = \"darkgray\") +   geom_point(aes(x = row.ID, y = orig, color = influential)) +   ggtitle(\"Result of JaB Algorithm\") +   xlab(\"Observation ID\") +   ylab(\"DFFITS\") +   theme_minimal()+   scale_color_discrete(name = \"Flagged as Influential\")"},{"path":"/articles/jab-regression.html","id":"life-cycle-savings-data","dir":"Articles","previous_headings":"","what":"Life Cycle Savings Data","title":"Jackknife-after-Bootstrap for Linear Regression","text":"next look example Life Cycle Savings data datasets package. data set contains 1960 1970 average personal savings, percent population 15, percent population 75, per-capita disposal income percentage growth rage disposable income 50 countries. model average personal savings function four covariates. investigate countries flagged influential studentized residuals, DFFITS, likelihood distance. studentized residuals built functions stats package, likelihood distance .","code":"data(\"LifeCycleSavings\", package = \"datasets\") mod2 <- lm(sr ~ ., data = LifeCycleSavings)"},{"path":"/articles/jab-regression.html","id":"studentized-residuals","dir":"Articles","previous_headings":"Life Cycle Savings Data","what":"Studentized residuals","title":"Jackknife-after-Bootstrap for Linear Regression","text":"Let’s first consider studentized residuals quantile cutoffs 0.025 0.975. traditional cutoff studentized residuals \\(\\pm t_{0.975, n-p-1} = \\pm 2.10\\) flags Chile Zambia. JaB algorithm also flags Chile Zambia influential. can also visualize JaB results plotting lower upper quantile values. plot includes six countries, two influential studentized residuals (Chile Zambia), four (Japan, Libya, Spain, Italy). plot can see Chile flagged influential lower cutoff value Zambia flagged upper cutoff value.","code":"# JaB with studentized residuals result2 <- jab_lm(mod2,                   stat = \"rstudent\",                   quant.lower = 0.025,                   quant.upper = 0.975,                   B = 3100)  result2 %>%    mutate(traditional.cuttoff = qt(0.975, df = n-p-1)) %>%    mutate(traditioanl.flag = abs(orig) > traditional.cuttoff) %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%    select(country, orig,traditioanl.flag,  lower, upper, influential, ) %>%    filter(traditioanl.flag | influential) %>%    mutate(across(c(lower, upper, orig), function(x)round(x,2))) %>%    kable(col.names = c(\"Country\", \"Studentized Residual\", \"Traditional Flag\", \"Lower Cutoff\", \"Upper Cutoff\", \"JaB Flag\")) %>%    kable_styling() %>%    add_header_above(c(\" \" = 3, \"JaB Results\" = 3)) result2 %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%   filter(country %in% c(\"Chile\", \"Zambia\", \"Japan\", \"Libya\", \"Spain\", \"Italy\")) %>%    ggplot() +   geom_segment(aes(x = country, y = lower, yend = upper), color = \"darkgray\") +   geom_point(aes(x = country, y = orig, color = influential)) +   ggtitle(\"Result of JaB Algorithm\") +   xlab(\"Country\") +   ylab(\"Studentized Residuals\") +   theme_minimal()+   scale_color_discrete(name = \"Flagged as Influential\")"},{"path":"/articles/jab-regression.html","id":"dffits","dir":"Articles","previous_headings":"Life Cycle Savings Data","what":"DFFITS","title":"Jackknife-after-Bootstrap for Linear Regression","text":"Next, consider JaB DFFITS quantile cutoffs 0.025 0.975. traditional cutoff value DFFITS \\(\\pm 2\\sqrt{p/n} = \\pm 2\\sqrt{5/50} = 0.63\\) flags Japan, Zambia, Libya. JaB DFFITS also flags three countries. visualize JaB results six countries previously mentioned. plot can see Libya flagged ’s lower cutoff value Japan Zambia flagged respective cutoff values. Unlike results JaB studentized residuals, Chile flagged influential lower upper cutoff values.","code":"result3 <- jab_lm(mod2,                   stat = \"dffits\",                   quant.lower = 0.025,                   quant.upper = 0.975,                   B = 3100) result3 %>%    mutate(traditional.cuttoff = 2 * sqrt(5/50)) %>%    mutate(traditioanl.flag = abs(orig) > traditional.cuttoff) %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%    select(country, orig,traditioanl.flag,  lower, upper, influential, ) %>%    filter(traditioanl.flag | influential) %>%    mutate(across(c(lower, upper, orig), function(x)round(x,2))) %>%    kable(col.names = c(\"Country\", \"DFFITS\", \"Traditional Flag\", \"Lower Cutoff\", \"Upper Cutoff\", \"JaB Flag\")) %>%    kable_styling() %>%    add_header_above(c(\" \" = 3, \"JaB Results\" = 3)) result3 %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%   filter(country %in% c(\"Chile\", \"Zambia\", \"Japan\", \"Libya\", \"Spain\", \"Italy\")) %>%    ggplot() +   geom_segment(aes(x = country, y = lower, yend = upper), color = \"darkgray\") +   geom_point(aes(x = country, y = orig, color = influential)) +   ggtitle(\"Result of JaB Algorithm\") +   xlab(\"Country\") +   ylab(\"DFFITS\") +   theme_minimal()+   scale_color_discrete(name = \"Flagged as Influential\")"},{"path":"/articles/jab-regression.html","id":"likelihood-distance","dir":"Articles","previous_headings":"Life Cycle Savings Data","what":"Likelihood Distance","title":"Jackknife-after-Bootstrap for Linear Regression","text":"Lastly, use JaB likelihood distance. likelihood distance always positive, consider lower cutoff (set quant.lower=0), consider upper cutoff. example consider upper 0.03 quantile (set quant.upper =0.97). Additionally, likelihood distance built-function stats package, can define . traditional cutoff value likelihood distance \\(\\chi^2_{0.97, p} = 7.01\\) flag countries influential. JaB algorithm flags Japan, Zambia, Libya. histogram likelihood distances , can see none values near traditional cutoff 12.83. suggests likelihood distance may “conservative” influence statistic data set using JaB algorithm likelihood distance may appropriate.  Looking results JaB algorithm likelihood distance six counties, can see likelihood distance values Zambia Libya well respective cutoff values suggesting definitely influential, whereas Japan’s value slight cutoff suggesting “barley” influential.","code":"infl_like <- function(mod){      # input lm model object   # output n statistics, one for each observation    n <- length(mod$fitted.values)   p <- length(mod$coefficients)    ti <- rstudent(mod)   h <- hatvalues(mod)    p1 <- log( (n/(n-1)) * ((n-p-1) / (ti^2 +n-p-1)) )   p2 <- ti^2 * (n-1) / (1-h) / (n-p-1)    return(n*p1 + p2 - 1) }  ## JaB with Likelihood Distance result4 <- jab_lm(mod2,                   stat = \"infl_like\",                   quant.lower = 0,                   quant.upper = 0.97,                   B = 3100) result4 %>%    mutate(traditional.cuttoff = qchisq(0.97, df = p)) %>%    mutate(traditioanl.flag = abs(orig) > traditional.cuttoff) %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%    select(country, orig,traditioanl.flag,  lower, upper, influential, ) %>%    filter(traditioanl.flag | influential) %>%    mutate(across(c(lower, upper, orig), function(x)round(x,2))) %>%    kable(col.names = c(\"Country\", \"Likelihood Distance\", \"Traditional Flag\", \"Lower Cutoff\", \"Upper Cutoff\", \"JaB Flag\")) %>%    kable_styling() %>%    add_header_above(c(\" \" = 3, \"JaB Results\" = 3)) hist(result4$orig, breaks = 12, freq = T,      main = \"Histogram of Likelihood Distance\",      xlab = \"Likelihood Disance\",       ylab = \"Frequency\") result4 %>%    rowwise() %>%    mutate(country = rownames(LifeCycleSavings)[row.ID]) %>%   filter(country %in% c(\"Chile\", \"Zambia\", \"Japan\", \"Libya\", \"Spain\", \"Italy\")) %>%    ggplot() +   geom_segment(aes(x = country, y = lower, yend = upper), color = \"darkgray\") +   geom_point(aes(x = country, y = orig, color = influential)) +   ggtitle(\"Result of JaB Algorithm\") +   xlab(\"Country\") +   ylab(\"Lieklihood Distance\") +   theme_minimal()+   scale_color_discrete(name = \"Flagged as Influential\")"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Olivia Beck. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beck O (2024). JaB: R Package Jackknife--Bootstrap algorithm network data. https://olbeck.github.io/JaB/, https://github.com/olbeck/JaB.","code":"@Manual{,   title = {JaB: R Package for Jackknife-after-Bootstrap algorithm for network data},   author = {Olivia Beck},   year = {2024},   note = {https://olbeck.github.io/JaB/, https://github.com/olbeck/JaB}, }"},{"path":"/index.html","id":"jab-jackknife-after-bootstrap","dir":"","previous_headings":"","what":"R Package for Jackknife-after-Bootstrap algorithm for network data","title":"R Package for Jackknife-after-Bootstrap algorithm for network data","text":"Currently development. R package using Jackknife--Bootstrap algorithm detect influential nodes network.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package for Jackknife-after-Bootstrap algorithm for network data","text":"","code":"devtools::install_github( 'olbeck/JaB' )"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Package for Jackknife-after-Bootstrap algorithm for network data","text":"","code":"# INSERT EXAMPLE FROM USAGE VIGNETTE"},{"path":"/reference/ASE.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacency Spectral Embedding — ASE","title":"Adjacency Spectral Embedding — ASE","text":"Calculate adjacency spectral embedding network.","code":""},{"path":"/reference/ASE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacency Spectral Embedding — ASE","text":"","code":"ASE(network, d)"},{"path":"/reference/ASE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacency Spectral Embedding — ASE","text":"network igraph object \\(n\\) nodes. d number latent dimensions embed node positions .","code":""},{"path":"/reference/ASE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacency Spectral Embedding — ASE","text":"\\(n\\)--\\(d\\) matrix \\(^{th}\\) row matrix corresponds node \\(\\)'s position d-dimensional latent space. Bootstrap samples retain vertex names input network loose vertex edge attributes.","code":""},{"path":"/reference/ASE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjacency Spectral Embedding — ASE","text":"calculates latent positions nodes network \\(\\mathbb{R}^d\\) using adjacency spectral embedding (Sussman et al. 2012) . Let \\(\\boldsymbol{}\\) adjacency matrix network \\(n\\) nodes. Additionally, let \\(\\hat{\\boldsymbol{\\Lambda}} \\\\mathbb{R}^{d \\times d}\\) diagonal matrix formed top d largest-magnitude eigenvalues adjacency matrix \\(\\hat{\\boldsymbol{U}} \\\\mathbb{R}^{n \\times d}\\) matrix corresponding eigenvectors columns. adjacency spectral embedding \\(\\boldsymbol{}\\) \\(\\hat{\\boldsymbol{X}} = \\hat{\\boldsymbol{U}}\\hat{\\boldsymbol{\\Lambda}}^{1/2} \\\\mathbb{R}^{n \\times d}\\). \\(\\text{}^{\\text{th}}\\) row \\(\\hat{\\boldsymbol{X}}\\) corresponds location \\(\\text{}^{\\text{th}}\\) node d dimensional latent space.","code":""},{"path":"/reference/ASE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adjacency Spectral Embedding — ASE","text":"Sussman DL, Tang M, Fishkind DE, Prieb CE (2012). “consistent adjacency spectral embedding stochastic blockmodel graphs.” Journal American Statistical Association, 107(499), 1119--1128.","code":""},{"path":"/reference/ASE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjacency Spectral Embedding — ASE","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union data(\"karate\") #Find the latent positions in 2D X <- ASE(karate, 2) plot(X)   # Color According to faction plot(X, col = ifelse(V(karate)$Faction == 1, \"red\", \"blue\"))   # Latent Space Bootstrap set.seed(1) boot.sample <- bootstrap_latent_space(karate, d = 2, B = 1)  #plot comparison of original data and bootstrap sample par(mfrow = c(1, 2)) l <- igraph::layout_nicely(karate) plot(karate,      layout = l,      main = \"Karate Data\") plot(boot.sample[[1]],      layout = l,      main = \"Karate Bootstrap Sample\",      vertex.label = 1:gorder(karate),      vertex.color = V(karate)$color)"},{"path":"/reference/bootstrap_latent_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Latent Space Bootstrap — bootstrap_latent_space","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"Generate bootstrap samples network latent space bootstrap method described Levin Levina (2019) .","code":""},{"path":"/reference/bootstrap_latent_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"","code":"bootstrap_latent_space(network, d = 2, B = 1000, output.type = \"igraph\")"},{"path":"/reference/bootstrap_latent_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"network igraph object \\(n\\) nodes. d Dimension latent space. Recommended 2 3 maintain interpretability. B number bootstrap samples calculate output.type class object resulting bootstrap networks . default igraph make bootstrap samples class \"igraph\". Note large \\(B\\), may efficient use storage space. options include matrix return bootstrap samples \\(n\\)--\\(n\\) adjacency matrix, dgCMatrix return scarce matrices (package Matrix must loaded), edgelist return \\(n\\)--\\(2\\) matrix list edges network. See make_network_type details.","code":""},{"path":"/reference/bootstrap_latent_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"list length \\(B\\) element bootstrap sample. element type output.type.","code":""},{"path":"/reference/bootstrap_latent_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"Generate bootstrap samples network latent space bootstrap method described Levin Levina (2019) . Latent positions nodes network first calculated \\(\\mathbb{R}^d\\) using adjacency spectral ASE (Sussman et al. 2012) . pair nodes, edge present probability equal dot product positions latent space. Let \\(\\boldsymbol{}\\) adjacency matrix network \\(n\\) nodes. Additionally, let \\(\\hat{\\boldsymbol{\\Lambda}} \\\\mathbb{R}^{d \\times d}\\) diagonal matrix formed top d largest-magnitude eigenvalues adjacency matrix \\(\\hat{\\boldsymbol{U}} \\\\mathbb{R}^{n \\times d}\\) matrix corresponding eigenvectors columns. adjacency spectral embedding \\(\\boldsymbol{}\\) \\(\\hat{\\boldsymbol{X}} = \\hat{\\boldsymbol{U}}\\hat{\\boldsymbol{\\Lambda}}^{1/2} \\\\mathbb{R}^{n \\times d}\\). Let \\(X_i\\) \\(\\text{}^{\\text{th}}\\) row \\(\\hat{\\boldsymbol{X}}\\), corresponds location \\(\\text{}^{\\text{th}}\\) node d dimensional latent space. generate bootstrap adjacency matrix \\(\\boldsymbol{}^{(b)}\\), \\(1 \\leq < j \\leq n\\) independently draw \\(A_{ij}^{(b)} \\sim \\text{Bernoulli}(X_i^T X_j)\\). may cases \\(X_i^T X_j \\\\[0,1]\\). cases, replace \\(X_i^T X_j\\) \\(\\max(\\min(X_i^T X_j, 1), 0)\\).","code":""},{"path":"/reference/bootstrap_latent_space.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"Levin K, Levina E (2019). “Bootstrapping networks latent space structure.” arXiv preprint arXiv:1907.10821. Sussman DL, Tang M, Fishkind DE, Prieb CE (2012). “consistent adjacency spectral embedding stochastic blockmodel graphs.” Journal American Statistical Association, 107(499), 1119--1128.","code":""},{"path":"/reference/bootstrap_latent_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Latent Space Bootstrap — bootstrap_latent_space","text":"","code":"library(igraph) data(\"karate\") #Find the latent positions in 2D X <- ASE(karate, 2) plot(X)   # Color According to faction plot(X, col = ifelse(V(karate)$Faction == 1, \"red\", \"blue\"))   # Latent Space Bootstrap set.seed(1) boot.sample <- bootstrap_latent_space(karate, d = 2, B = 1)  #plot comparison of original data and bootstrap sample par(mfrow = c(1, 2)) l <- igraph::layout_nicely(karate) plot(karate,      layout = l,      main = \"Karate Data\") plot(boot.sample[[1]],      layout = l,      main = \"Karate Bootstrap Sample\",      vertex.label = 1:gorder(karate),      vertex.color = V(karate)$color)"},{"path":"/reference/bootstrap_snowboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"slightly modified version lsmi snowboot package.","code":""},{"path":"/reference/bootstrap_snowboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"","code":"bootstrap_snowboot(   network,   B,   num.seed = NA,   num.wave = NA,   output.type = \"igraph\" )"},{"path":"/reference/bootstrap_snowboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"network igraph object \\(n\\) nodes. B Number bootstrap samples num.seed Number seeds included snowball sample num.wave Number waves included snowball sample output.type type object resulting bootstrap networks . default igraph make bootstrap samples class \"igraph\". Note large \\(B\\), may efficient use storage space. options include edgelist returns edge list bootstrap sample, matrix returns bootstrap samples \\(n\\)--\\(n\\) adjacency matrix, dgCMatrix returns sparse matrices (package Matrix must loaded). See make_network_type details.","code":""},{"path":"/reference/bootstrap_snowboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"list length \\(B\\) element bootstrap sample. element class output.type.","code":""},{"path":"/reference/bootstrap_snowboot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"slightly modified version lsmi snowboot package. function inputs igraph object, uses node names (node IDs), returns edge list bootstrap sample (nodes included sample).","code":""},{"path":"/reference/bootstrap_snowboot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"Ramirez-Ramirez L, Nezafati K, Chen Y, Lyubchich Y, Gel YR (2022). snowboot: Bootstrap Methods Network Inference. R package version 1.0.2, https://cran.r-project.org/web/packages/snowboot. Gel YR, Lyubchich V, Ramirez LR (2017). “Bootstrap quantification estimation uncertainties network degree distributions.” Scientific Reports, 7(1). doi:10.1038/s41598-017-05885-x .","code":""},{"path":[]},{"path":"/reference/bootstrap_snowboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Snowball Sampling (Labeled Snowball with multiple inclusions) — bootstrap_snowboot","text":"","code":"library(igraph) data(\"karate\") # Snowboot Bootstrap set.seed(1) boot.sample <- bootstrap_snowboot(karate, B = 1, num.seed = 1, num.wave = 2)  #plot comparison of original data and bootstrap sample par(mfrow = c(1, 2)) #get the same positions in the original data and bootstrap samples l <- igraph::layout_nicely(karate) which.index <- NA for(i in 1:gorder(boot.sample[[1]])){   which.index[i] <- which(V(boot.sample[[1]])$name[i] == V(karate)$name) }  plot(karate,      layout = l,      main = \"Karate Data\",      vertex.label = NA) plot(boot.sample[[1]],      layout = l[which.index, ],      main = \"Karate Bootstrap Sample\",      vertex.label = NA,      vertex.color = V(karate)$Faction[which.index ])"},{"path":"/reference/bootstrap_vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"Generate bootstrap samples network resampling vertices. function uses modified version vertboot snowboot package allow flexible input output network types.","code":""},{"path":"/reference/bootstrap_vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"","code":"bootstrap_vertex(network, B = 1000, output.type = \"igraph\")"},{"path":"/reference/bootstrap_vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"network igraph object representing original network. B integer specifying number bootstrap samples generate. Defaults 1000. output.type character string specifying format output networks. Options include \"igraph\", \"matrix\", \"dgCMatrix\", \"edgelist\". Defaults \"igraph\". See make_network_type details.","code":""},{"path":"/reference/bootstrap_vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"list bootstrap sample networks, specified output.type format.","code":""},{"path":"/reference/bootstrap_vertex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"Generates bootstrap samples network resampling vertices. function uses modified version vertboot snowboot (Ramirez-Ramirez et al. 2022)  package allow flexible input output network types. procedure first described Snijders Borgatti (1999)  outlined explicitly Chen et al. (2018) .","code":""},{"path":"/reference/bootstrap_vertex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"Chen Y, Gel YR, Lyubchich V, Nezafati K (2018). “Snowboot: Bootstrap Methods Network Inference.” R Journal, 10(2). Ramirez-Ramirez L, Nezafati K, Chen Y, Lyubchich Y, Gel YR (2022). snowboot: Bootstrap Methods Network Inference. R package version 1.0.2, https://cran.r-project.org/web/packages/snowboot. Snijders TAB, Borgatti SP (1999). “Non-parametric standard errors tests network statistics.” Connections, 22(2), 161--170.","code":""},{"path":[]},{"path":"/reference/bootstrap_vertex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex Bootstrap Sampling for networks — bootstrap_vertex","text":"","code":"library(igraph) data(karate) set.seed(12) boot.samp <- bootstrap_vertex(karate, B=1)  #plot comparison of original data and bootstrap sample par(mfrow = c(1, 2)) #get the same positions in the original data and bootstrap samples l <- igraph::layout_nicely(karate) which.index <- NA for(i in 1:gorder(boot.samp[[1]])){   which.index[i] <- which(V(boot.samp[[1]])$name[i] == V(karate)$name) }  plot(karate,      layout = l,      main = \"Karate Data\",      vertex.label = NA) plot(boot.samp[[1]],      layout = l[which.index, ],      main = \"Karate Bootstrap Sample\",      vertex.label = NA,      vertex.color = V(karate)$Faction[which.index ])"},{"path":"/reference/detect_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the Type of Objects in a List — detect_type","title":"Detect the Type of Objects in a List — detect_type","text":"Attempts detect type network representation list.  Networks can represented \"igraph\", \"dgCMatrix\", \"edgelist\", \"matrix\".","code":""},{"path":"/reference/detect_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the Type of Objects in a List — detect_type","text":"","code":"detect_type(obj)"},{"path":"/reference/detect_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the Type of Objects in a List — detect_type","text":"obj list networks. networks list must representation. e.g. networks list must edge list.","code":""},{"path":"/reference/detect_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the Type of Objects in a List — detect_type","text":"character string indicating representation networks list. Possible return values : \"igraph\": networks igraph objects. \"dgCMatrix\": networks sparse matrices class dgCMatrix. \"edgelist\": networks matrices two columns, representing edge list. \"matrix\": networks square matrices, typically representing adjacency matrices.","code":""},{"path":"/reference/detect_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect the Type of Objects in a List — detect_type","text":"function detects input list networks represented \"igraph\", \"dgCMatrix\", \"edgelist\" \"matrix\". function primarily used internally verifying networks correct format intended operation used. 2--2 matrices default \"matrix\".","code":""},{"path":[]},{"path":"/reference/detect_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the Type of Objects in a List — detect_type","text":"","code":"# Convert list of adjacency matrices to igraph objects one_matrix <- matrix(c(0, 1, 1, 1, 0, 0, 1, 0, 0), nrow = 3, byrow = TRUE) matrix_list <- replicate(3, one_matrix, simplify = FALSE) igraph_list <-   make_network_type(matrix_list,                    input.type = \"matrix\",                    output.type = \"igraph\")  # Same thing now using detect type type <- detect_type(matrix_list) type #> [1] \"matrix\" igraph_list <-   make_network_type(matrix_list,                    input.type = type,                    output.type = \"igraph\")  # Convert list of igraph objects to sparse matrix sparsematrix_list <-   make_network_type(igraph_list,                     input.type = \"igraph\",                     output.type = \"dgCMatrix\") detect_type(sparsematrix_list) #> [1] \"dgCMatrix\""},{"path":"/reference/get_bootstrap_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"function takes bootstrap samples graph data bootstrap_ functions computes specified centrality statistics sample.","code":""},{"path":"/reference/get_bootstrap_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"","code":"get_bootstrap_centrality(   boot.result,   func.name,   package.name = NULL,   func.args = NULL,   obj.type = NULL )"},{"path":"/reference/get_bootstrap_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"boot.result list bootstrap samples, sample represents graph specified format (e.g., adjacency matrix, edgelist). output bootstrap_ function. func.name character string specifying centrality function apply (e.g., \"degree\", \"betweenness\"). See get_centrality details. package.name optional character string indicating package name containing centrality function. Defaults NULL (assuming func.name available). See get_centrality details. func.args optional list additional arguments pass centrality function. Defaults NULL. See get_centrality details. obj.type character string specifying type obj bootstrap sample. Options include \"igraph\", \"matrix\", \"dgCMatrix\", \"edgelist\". output.type bootstrap_ function.","code":""},{"path":"/reference/get_bootstrap_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"list length B, element bootstrap centrality statistic result applying specified centrality statistic function.","code":""},{"path":"/reference/get_bootstrap_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"Calculates bootstrap centrality statistics give bootstrap samples specified centrality statistic.","code":""},{"path":[]},{"path":"/reference/get_bootstrap_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Bootstrap Centrality Statistics from Bootstrap Samples — get_bootstrap_centrality","text":"","code":"library(igraph) data(\"karate\") set.seed(89) boot.result <- bootstrap_latent_space(   karate, d = 2, B = 10)  #Calculate degree centrality (from igraph) central.result <- get_bootstrap_centrality(boot.result,                                            func.name = \"degree\",                                            package.name = \"igraph\",                                            func.args = list(normalized = TRUE)) central.result[[1]] #>      Mr Hi    Actor 2    Actor 3    Actor 4    Actor 5    Actor 6    Actor 7  #> 0.33333333 0.30303030 0.24242424 0.18181818 0.09090909 0.09090909 0.09090909  #>    Actor 8    Actor 9   Actor 10   Actor 11   Actor 12   Actor 13   Actor 14  #> 0.18181818 0.24242424 0.06060606 0.09090909 0.06060606 0.09090909 0.27272727  #>   Actor 15   Actor 16   Actor 17   Actor 18   Actor 19   Actor 20   Actor 21  #> 0.12121212 0.06060606 0.03030303 0.09090909 0.03030303 0.06060606 0.09090909  #>   Actor 22   Actor 23   Actor 24   Actor 25   Actor 26   Actor 27   Actor 28  #> 0.12121212 0.18181818 0.18181818 0.12121212 0.06060606 0.09090909 0.06060606  #>   Actor 29   Actor 30   Actor 31   Actor 32   Actor 33     John A  #> 0.21212121 0.12121212 0.06060606 0.18181818 0.36363636 0.33333333   #plot bootstrap centralities vs original centrality hist(unlist(central.result), freq = FALSE,      xlab = \"degree centrality\", main = \"Bootstrap Degree Centralities\") lines(density(igraph::degree(karate, normalized = TRUE)), col = \"red\")"},{"path":"/reference/get_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate given centrality statistic on a network — get_centrality","title":"Calculate given centrality statistic on a network — get_centrality","text":"Calculate given centrality statistic network","code":""},{"path":"/reference/get_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate given centrality statistic on a network — get_centrality","text":"","code":"get_centrality(network, func.name, package.name = NULL, func.args = NULL)"},{"path":"/reference/get_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate given centrality statistic on a network — get_centrality","text":"network network object. appropriate object type needed func.name specified. func.name character string function name used calculate desired centrality statistic. package.name character string name package func.name function . left NULL function called loaded users environment. func.args list additional arguments func.name function may need beyond network object.","code":""},{"path":"/reference/get_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate given centrality statistic on a network — get_centrality","text":"numeric vector centrality statistic calculated func.name.","code":""},{"path":"/reference/get_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate given centrality statistic on a network — get_centrality","text":"","code":"library(igraph) data(\"karate\")  #Degree Centrality get_centrality(karate, \"degree\") #>    Mr Hi  Actor 2  Actor 3  Actor 4  Actor 5  Actor 6  Actor 7  Actor 8  #>       16        9       10        6        3        4        4        4  #>  Actor 9 Actor 10 Actor 11 Actor 12 Actor 13 Actor 14 Actor 15 Actor 16  #>        5        2        3        1        2        5        2        2  #> Actor 17 Actor 18 Actor 19 Actor 20 Actor 21 Actor 22 Actor 23 Actor 24  #>        2        2        2        3        2        2        2        5  #> Actor 25 Actor 26 Actor 27 Actor 28 Actor 29 Actor 30 Actor 31 Actor 32  #>        3        3        2        4        3        4        4        6  #> Actor 33   John A  #>       12       17  get_centrality(karate, \"degree\", package.name = \"igraph\") #>    Mr Hi  Actor 2  Actor 3  Actor 4  Actor 5  Actor 6  Actor 7  Actor 8  #>       16        9       10        6        3        4        4        4  #>  Actor 9 Actor 10 Actor 11 Actor 12 Actor 13 Actor 14 Actor 15 Actor 16  #>        5        2        3        1        2        5        2        2  #> Actor 17 Actor 18 Actor 19 Actor 20 Actor 21 Actor 22 Actor 23 Actor 24  #>        2        2        2        3        2        2        2        5  #> Actor 25 Actor 26 Actor 27 Actor 28 Actor 29 Actor 30 Actor 31 Actor 32  #>        3        3        2        4        3        4        4        6  #> Actor 33   John A  #>       12       17   #Degree Centrality normalized get_centrality(karate, \"degree\", package.name = \"igraph\",                func.args = list(normalized = TRUE)) #>      Mr Hi    Actor 2    Actor 3    Actor 4    Actor 5    Actor 6    Actor 7  #> 0.48484848 0.27272727 0.30303030 0.18181818 0.09090909 0.12121212 0.12121212  #>    Actor 8    Actor 9   Actor 10   Actor 11   Actor 12   Actor 13   Actor 14  #> 0.12121212 0.15151515 0.06060606 0.09090909 0.03030303 0.06060606 0.15151515  #>   Actor 15   Actor 16   Actor 17   Actor 18   Actor 19   Actor 20   Actor 21  #> 0.06060606 0.06060606 0.06060606 0.06060606 0.06060606 0.09090909 0.06060606  #>   Actor 22   Actor 23   Actor 24   Actor 25   Actor 26   Actor 27   Actor 28  #> 0.06060606 0.06060606 0.15151515 0.09090909 0.09090909 0.06060606 0.12121212  #>   Actor 29   Actor 30   Actor 31   Actor 32   Actor 33     John A  #> 0.09090909 0.12121212 0.12121212 0.18181818 0.36363636 0.51515152    #Closeness centrality get_centrality(karate, \"closeness\") #>       Mr Hi     Actor 2     Actor 3     Actor 4     Actor 5     Actor 6  #> 0.007692308 0.006060606 0.005952381 0.005347594 0.004629630 0.004608295  #>     Actor 7     Actor 8     Actor 9    Actor 10    Actor 11    Actor 12  #> 0.004651163 0.005524862 0.006024096 0.005780347 0.005319149 0.004424779  #>    Actor 13    Actor 14    Actor 15    Actor 16    Actor 17    Actor 18  #> 0.006211180 0.005780347 0.005181347 0.004166667 0.003289474 0.005847953  #>    Actor 19    Actor 20    Actor 21    Actor 22    Actor 23    Actor 24  #> 0.005681818 0.007518797 0.006172840 0.005347594 0.004807692 0.004201681  #>    Actor 25    Actor 26    Actor 27    Actor 28    Actor 29    Actor 30  #> 0.004784689 0.003745318 0.005128205 0.004739336 0.006134969 0.005291005  #>    Actor 31    Actor 32    Actor 33      John A  #> 0.005263158 0.006329114 0.006060606 0.007633588  get_centrality(karate, \"closeness\", package.name = \"igraph\",                func.args = list(normalized = TRUE)) #>     Mr Hi   Actor 2   Actor 3   Actor 4   Actor 5   Actor 6   Actor 7   Actor 8  #> 0.2538462 0.2000000 0.1964286 0.1764706 0.1527778 0.1520737 0.1534884 0.1823204  #>   Actor 9  Actor 10  Actor 11  Actor 12  Actor 13  Actor 14  Actor 15  Actor 16  #> 0.1987952 0.1907514 0.1755319 0.1460177 0.2049689 0.1907514 0.1709845 0.1375000  #>  Actor 17  Actor 18  Actor 19  Actor 20  Actor 21  Actor 22  Actor 23  Actor 24  #> 0.1085526 0.1929825 0.1875000 0.2481203 0.2037037 0.1764706 0.1586538 0.1386555  #>  Actor 25  Actor 26  Actor 27  Actor 28  Actor 29  Actor 30  Actor 31  Actor 32  #> 0.1578947 0.1235955 0.1692308 0.1563981 0.2024540 0.1746032 0.1736842 0.2088608  #>  Actor 33    John A  #> 0.2000000 0.2519084   #Eigen centrality get_centrality(karate, \"eigen_centrality\") #>      Mr Hi    Actor 2    Actor 3    Actor 4    Actor 5    Actor 6    Actor 7  #> 0.85787944 0.82876616 0.99036448 0.54536909 0.15291191 0.18519270 0.18250148  #>    Actor 8    Actor 9   Actor 10   Actor 11   Actor 12   Actor 13   Actor 14  #> 0.49006831 0.67825515 0.13788382 0.12588193 0.11866884 0.11499616 0.66050150  #>   Actor 15   Actor 16   Actor 17   Actor 18   Actor 19   Actor 20   Actor 21  #> 0.21845188 0.31067062 0.05086244 0.11732645 0.13429645 0.20164970 0.17234251  #>   Actor 22   Actor 23   Actor 24   Actor 25   Actor 26   Actor 27   Actor 28  #> 0.15554033 0.22248354 0.59886179 0.14020695 0.33667492 0.16102652 0.40561477  #>   Actor 29   Actor 30   Actor 31   Actor 32   Actor 33     John A  #> 0.23660019 0.37306834 0.43481077 0.57527665 0.91256318 1.00000000"},{"path":"/reference/get_infl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate given influence/outlier statistic on a linear model object — get_infl","title":"Calculate given influence/outlier statistic on a linear model object — get_infl","text":"function primarily used internal function jab_lmJaB.","code":""},{"path":"/reference/get_infl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate given influence/outlier statistic on a linear model object — get_infl","text":"","code":"get_infl(mod, func.name, package.name = NULL, args = NULL)"},{"path":"/reference/get_infl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate given influence/outlier statistic on a linear model object — get_infl","text":"mod lm object. Output lmstats. func.name character string function name used calculate desired centrality statistic. package.name character string name package func.name function . left NULL function called loaded users environment. args named list additional arguments func.name function may need beyond mod object.","code":""},{"path":"/reference/get_infl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate given influence/outlier statistic on a linear model object — get_infl","text":"numeric vector influence/outlier statistic calculated func.name.","code":""},{"path":"/reference/get_infl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate given influence/outlier statistic on a linear model object — get_infl","text":"","code":"library(stats) data(\"LifeCycleSavings\")  mod <- lm(sr ~ ., data = LifeCycleSavings)  #defined functions in stats get_infl(mod, \"dffits\") #>      Australia        Austria        Belgium        Bolivia         Brazil  #>     0.06271756     0.06324405     0.18780542    -0.05967770     0.26464755  #>         Canada          Chile          China       Colombia     Costa Rica  #>    -0.03897262    -0.45535788     0.20077524    -0.09602160     0.40493458  #>        Denmark        Ecuador        Finland         France        Germany  #>     0.38451126    -0.16946909    -0.14641688     0.27653834    -0.01521770  #>         Greece      Guatamala       Honduras        Iceland          India  #>    -0.28114772    -0.23053977     0.04816829    -0.47676403     0.03808618  #>        Ireland          Italy          Japan          Korea     Luxembourg  #>     0.52157524     0.13884474     0.85965081    -0.43025048    -0.14006342  #>          Malta         Norway    Netherlands    New Zealand      Nicaragua  #>     0.23855360    -0.05216187     0.03663477     0.14694487     0.03972980  #>         Panama       Paraguay           Peru    Philippines       Portugal  #>    -0.17751461    -0.46547654     0.48109398     0.48840149    -0.06901872  #>   South Africa South Rhodesia          Spain         Sweden    Switzerland  #>     0.03429664     0.16071740    -0.05261883    -0.45256252     0.19034296  #>         Turkey        Tunisia United Kingdom  United States      Venezuela  #>    -0.14453378    -0.21765669    -0.27221843    -0.25095085     0.30708996  #>         Zambia        Jamaica        Uruguay          Libya       Malaysia  #>     0.74823509    -0.34555773    -0.20513659    -1.16013341    -0.21262745  get_infl(mod, \"rstudent\") #>      Australia        Austria        Belgium        Bolivia         Brazil  #>     0.23271611     0.17095506     0.60655220    -0.19037831     0.96790816  #>         Canada          Chile          China       Colombia     Costa Rica  #>    -0.08983197    -2.31342946     0.69048169    -0.38946778     1.41731062  #>        Denmark        Ecuador        Finland         France        Germany  #>     1.48644473    -0.64957871    -0.45986445     0.69640933    -0.04918692  #>         Greece      Guatamala       Honduras        Iceland          India  #>    -0.85967533    -0.90854545     0.19051919    -1.73119989     0.13729730  #>        Ireland          Italy          Japan          Korea     Luxembourg  #>     1.00485886     0.52015744     1.60321582    -1.69103214    -0.45560591  #>          Malta         Norway    Netherlands    New Zealand      Nicaragua  #>     0.81227407    -0.23247367     0.11605663     0.61373189     0.17254242  #>         Panama       Paraguay           Peru    Philippines       Portugal  #>    -0.88147653    -1.70488128     1.82391409     1.86382587    -0.21040432  #>   South Africa South Rhodesia          Spain         Sweden    Switzerland  #>     0.12996586     0.36714512    -0.18175853    -1.20293404     0.67532922  #>         Turkey        Tunisia United Kingdom  United States      Venezuela  #>    -0.71138840    -0.76677907    -0.74959873    -0.35461507     0.99932569  #>         Zambia        Jamaica        Uruguay          Libya       Malaysia  #>     2.85355834    -0.85376418    -0.62253411    -1.08930326    -0.80489153    #define the likelihood distance as influence statistic ## NEED TO CITE infl_like <- function(mod){    n <- length(mod$fitted.values)   p <- length(mod$coefficients)    ti <- rstudent(mod)   h <- hatvalues(mod)    p1 <- log( (n/(n-1)) * ((n-p-1) / (ti^2 +n-p-1)) )   p2 <- ti^2 * (n-1) / (1-h) / (n-p-1)    return(n*p1 + p2 - 1) }  infl_like(mod) #>      Australia        Austria        Belgium        Bolivia         Brazil  #>     0.01332285     0.01393650     0.04279099     0.01329473     0.07801597  #>         Canada          Chile          China       Colombia     Costa Rica  #>     0.01164427     0.46179324     0.04710546     0.01725230     0.19766003  #>        Denmark        Ecuador        Finland         France        Germany  #>     0.18557686     0.03481345     0.02977880     0.08729178     0.01033835  #>         Greece      Guatamala       Honduras        Iceland          India  #>     0.08834026     0.05925346     0.01191127     0.30613332     0.01132692  #>        Ireland          Italy          Japan          Korea     Luxembourg  #>     0.30310916     0.02639617     0.85682344     0.25252760     0.02781943  #>          Malta         Norway    Netherlands    New Zealand      Nicaragua  #>     0.06408061     0.01197483     0.01132621     0.02744299     0.01122802  #>         Panama       Paraguay           Peru    Philippines       Portugal  #>     0.03527406     0.28988377     0.32837082     0.34491328     0.01445942  #>   South Africa South Rhodesia          Spain         Sweden    Switzerland  #>     0.01106509     0.03607130     0.01248200     0.23179598     0.04278521  #>         Turkey        Tunisia United Kingdom  United States      Venezuela  #>     0.02517964     0.05395529     0.08393131     0.07761392     0.10514619  #>         Zambia        Jamaica        Uruguay          Libya       Malaysia  #>     1.21190479     0.13333477     0.05011857     1.49988249     0.05112667  get_infl(mod, \"infl_like\") #> Error in infl_like(structure(list(coefficients = c(`(Intercept)` = 28.5660865407468, pop15 = -0.461193147122768, pop75 = -1.69149767674954, dpi = -0.000336901869141349, ddpi = 0.409694927870671), residuals = c(Australia = 0.863579763089957, Austria = 0.616385987736311, Belgium = 2.218957928338, Bolivia = -0.698319121223192, Brazil = 3.55280944158801, Canada = -0.316892362577826, Chile = -8.2422306716793, China = 2.53603608513497, Colombia = -1.45170709733013, `Costa Rica` = 5.1250781784526, Denmark = 5.40023884278033, Ecuador = -2.40563130331345, Finland = -1.68108565185996, France = 2.47547182883964, Germany = -0.180699295374666, Greece = -3.11616846782401, Guatamala = -3.35528378971092, Honduras = 0.710024484173062, Iceland = -6.21058197743013, India = 0.508673999894876, Ireland = 3.39113064057356, Italy = 1.92675489523614, Japan = 5.28148554984659, Korea = -6.10698144474573, Luxembourg = -1.67080656669553, Malta = 2.97490978233697, Norway = -0.871785361021597, Netherlands = 0.425545510217781, `New Zealand` = 2.28555481755543, Nicaragua = 0.646396607890594, Panama = -3.29416560287372, Paraguay = -6.1257588810932, Peru = 6.53944101694304, Philippines = 6.67500844049873, Portugal = -0.768444679621794, `South Africa` = 0.483165565323186, `South Rhodesia` = 1.2914342214096, Spain = -0.671156455550308, Sweden = -4.26028339866931, Switzerland = 2.48682585582808, Turkey = -2.6656824059543, Tunisia = -2.81792000502934, `United Kingdom` = -2.69241276642556, `United States` = -1.11159014595127, Venezuela = 3.63251769439362, Zambia = 9.75091377184124, Jamaica = -3.01853140824666, Uruguay = -2.26382733704987, Libya = -2.82952566381197, Malaysia = -2.97086904885857), effects = c(`(Intercept)` = -68.384296808551, pop15 = -14.2869718756147, pop75 = 7.30360935931436, dpi = -3.52149771993956, ddpi = -7.94065681116866, -0.655206619955559, -7.98426769818929, 2.11835129324918, -1.5354578825814, 4.94070903923897, 4.9811476263448, -2.36103969775486, -1.5661521693604, 1.68196909708745, -0.182551082570306, -3.28374023011935, -3.03783031104655, 0.762019243487725, -6.28806559687962, 1.15942218549724, 2.92804205826621, 2.04415604780183, 5.04587845254195, -6.2647879270342, -1.38102756737135, 2.31670197356863, -1.15880106817969, -0.209548919949984, 2.26101525601646, 0.709220205102216, -3.39023406360215, -5.44378328667935, 6.93989846010402, 6.81988853627435, -1.20929423152311, 0.996491767935397, 2.24569677287488, -0.520632156857349, -4.74503902147376, 2.40967313840561, -2.54148496023116, -2.56770845836587, -2.71221486177228, -1.81298485410907, 3.95072523713182, 9.62759991285484, -4.29977588639926, -1.63553230064561, -5.52474122081385, -3.28514163602414), rank = 5L,     fitted.values = c(Australia = 10.56642023691, Austria = 11.4536140122637,     Belgium = 10.951042071662, Bolivia = 6.44831912122319, Brazil = 9.32719055841199,     Canada = 9.10689236257783, Chile = 8.8422306716793, China = 9.36396391486503,     Colombia = 6.43170709733013, `Costa Rica` = 5.6549218215474,     Denmark = 11.4497611572197, Ecuador = 5.99563130331345, Finland = 12.92108565186,     France = 10.1645281711604, Germany = 12.7306992953747, Greece = 13.786168467824,     Guatamala = 6.36528378971092, Honduras = 6.98997551582694,     Iceland = 7.48058197743013, India = 8.49132600010512, Ireland = 7.94886935942644,     Italy = 12.3532451047639, Japan = 15.8185144501534, Korea = 10.0869814447457,     Luxembourg = 12.0208065666955, Malta = 12.505090217663, Norway = 11.1217853610216,     Netherlands = 14.2244544897822, `New Zealand` = 8.38444518244457,     Nicaragua = 6.65360339210941, Panama = 7.73416560287372,     Paraguay = 8.1457588810932, Peru = 6.16055898305696, Philippines = 6.10499155950126,     Portugal = 13.2584446796218, `South Africa` = 10.6568344346768,     `South Rhodesia` = 12.0085657785904, Spain = 12.4411564555503,     Sweden = 11.1202833986693, Switzerland = 11.6431741441719,     Turkey = 7.7956824059543, Tunisia = 5.62792000502934, `United Kingdom` = 10.5024127664256,     `United States` = 8.67159014595127, Venezuela = 5.58748230560638,     Zambia = 8.80908622815876, Jamaica = 10.7385314082467, Uruguay = 11.5038273370499,     Libya = 11.719525663812, Malaysia = 7.68086904885857), assign = 0:4,     qr = structure(list(qr = structure(c(-7.07106781186548, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     0.14142135623731, 0.14142135623731, 0.14142135623731, 0.14142135623731,     -248.120941091235, 64.0620901313718, 0.165128351395561, -0.117253943076925,     -0.121936899867514, 0.041498292124025, -0.0836927527443743,     -0.161898131147202, -0.19140075892791, -0.207010614896538,     0.155450240695012, -0.186249506458262, 0.102064533282303,     0.14545993287509, 0.172777180820189, 0.136718413532658, -0.182190943906419,     -0.202015460986577, 0.00543952483649349, -0.108200226615121,     0.0502398114664568, 0.153889255098149, 0.115020713736264,     -0.114912464681631, 0.196348063332818, 0.0286982102297497,     0.13156716106301, 0.15092338246411, 0.0276055203119457, -0.166424989378104,     -0.143322402544535, -0.106170945339199, -0.15315661180477,     -0.185469013659831, 0.0845814945974391, 0.0380641238109267,     0.0383763209302993, 0.103625518879166, 0.201967611481524,     0.169967406745836, -0.141137022708927, -0.183283633824223,     0.173401575058934, 0.0713131170241051, -0.187654393495439,     -0.169703059131516, -0.105234353981081, 0.0975376750514007,     -0.145351683820456, -0.200142278270342, -16.2139584926075,     -8.208468361267, -3.77617493796019, 0.0876115456504285, -0.123991445176047,     0.0324742628761381, -0.0774961757403155, -0.0738240761695448,     0.0977743197948592, 0.155107547475184, 0.0545992517279037,     0.120271927354821, -0.234891833982489, 0.281643868164441,     -0.139119350354824, -0.121822565049815, 0.0261316708293862,     -0.00475795269661488, 0.176883803253687, -0.121375110291947,     0.367087953759436, -0.0609541793024463, -0.386710872116642,     -0.119072481822996, -0.093071549693098, -0.0385154980516702,     0.041052595204344, -0.114994298426074, 0.149387613557561,     0.0796606261525182, 0.0235137463728522, -0.10224067862105,     0.067472299707597, 0.0999272621483305, -0.0672935781881911,     -0.110519624702159, -0.312504442270379, -0.106097490965416,     0.108418027831249, -0.0319818209254472, -0.0133251299855025,     0.118700216134212, 0.153382985010363, 0.117026604084129,     0.046727936996969, -0.084880198289551, 0.0756668582882882,     -0.131722597209973, 0.258604824847036, 0.0120897742619538,     -7825.96369775173, -5244.98283997536, -1659.93396642261,     4224.21718621954, -0.0536035761934073, -0.35077055562151,     0.0207623401341921, 0.0236879366399189, 0.0545745559651996,     0.0114296081119295, -0.101423500131805, 0.0655969136116444,     -0.0698187942331708, 0.0345569662376129, -0.141247492691575,     0.200376455993068, 0.0364124765390022, 0.0170765160579042,     -0.0834728759435578, 0.113953733698577, 0.213306965476638,     0.118008933971425, -0.00866553196137767, 0.0792113815433863,     -0.0970181619831277, 0.173825665030011, -0.0698459049119983,     0.0126239481371422, 0.0290805918657238, 0.0643125258094002,     0.0125921826736313, 0.0917999190055434, 0.0570877549090301,     0.0914204492762292, 0.230757469991387, 0.146950137427881,     0.170732567828158, 0.193378225888342, -0.220912223157481,     -0.147702799390841, 0.0443649595718382, 0.077304219055593,     0.114947741036207, -0.529085028782653, -0.0863493470870069,     0.0469190526616599, 0.11777662604228, 0.178113267059554,     0.198657880592627, 0.0226743924701606, -26.5702444098657,     -0.960774896257385, 0.871339488314517, -5.12174037679466,     -19.3818772725331, -0.0342852848366908, -0.050612321042065,     0.151684286261799, -0.0196288590772824, -0.0273668123524811,     0.0198202468033202, -0.0658872227213478, 0.0258944985383431,     0.0450479043578137, -0.0136507065100683, 0.106740475035809,     -0.103928040664259, -0.0141841059200206, -0.116828148616797,     -0.117123520487969, -0.0404334605775779, -0.0262720701160171,     0.214858348707238, 0.106568493847888, -0.113364845360484,     0.213045488244538, -0.00114815133568938, 0.193245329389977,     -0.0955666175455098, -0.0534734806249023, 0.00574774495172758,     -0.140940531212752, -0.147448750016385, -0.0786961245719627,     0.171057803856445, -0.0939467507263722, -0.11359148283, 0.010171477682808,     -0.0211367673646394, -0.0469846629052428, -0.0320113781263437,     -0.121786835708436, -0.0977217117448339, -0.016588388025142,     -0.141504675692516, 0.0790414331106965, 0.338378959036943,     -0.116640440486279, 0.675176165764421, 0.0834079960915886    ), dim = c(50L, 5L), dimnames = list(c(\"Australia\", \"Austria\",     \"Belgium\", \"Bolivia\", \"Brazil\", \"Canada\", \"Chile\", \"China\",     \"Colombia\", \"Costa Rica\", \"Denmark\", \"Ecuador\", \"Finland\",     \"France\", \"Germany\", \"Greece\", \"Guatamala\", \"Honduras\", \"Iceland\",     \"India\", \"Ireland\", \"Italy\", \"Japan\", \"Korea\", \"Luxembourg\",     \"Malta\", \"Norway\", \"Netherlands\", \"New Zealand\", \"Nicaragua\",     \"Panama\", \"Paraguay\", \"Peru\", \"Philippines\", \"Portugal\",     \"South Africa\", \"South Rhodesia\", \"Spain\", \"Sweden\", \"Switzerland\",     \"Turkey\", \"Tunisia\", \"United Kingdom\", \"United States\", \"Venezuela\",     \"Zambia\", \"Jamaica\", \"Uruguay\", \"Libya\", \"Malaysia\"), c(\"(Intercept)\",     \"pop15\", \"pop75\", \"dpi\", \"ddpi\")), assign = 0:4), qraux = c(1.14142135623731,     1.1726210822605, 1.16459675512416, 1.15395548271583, 1.0534577838838    ), pivot = 1:5, tol = 1e-07, rank = 5L), class = \"qr\"), df.residual = 45L,     xlevels = structure(list(), names = character(0)), call = lm(formula = sr ~         ., data = LifeCycleSavings), terms = sr ~ pop15 + pop75 +         dpi + ddpi, model = structure(list(sr = c(11.43, 12.07,     13.17, 5.75, 12.88, 8.79, 0.6, 11.9, 4.98, 10.78, 16.85,     3.59, 11.24, 12.64, 12.55, 10.67, 3.01, 7.7, 1.27, 9, 11.34,     14.28, 21.1, 3.98, 10.35, 15.48, 10.25, 14.65, 10.67, 7.3,     4.44, 2.02, 12.7, 12.78, 12.49, 11.14, 13.3, 11.77, 6.86,     14.13, 5.13, 2.81, 7.81, 7.56, 9.22, 18.56, 7.72, 9.24, 8.89,     4.71), pop15 = c(29.35, 23.32, 23.8, 41.89, 42.19, 31.72,     39.74, 44.75, 46.64, 47.64, 24.42, 46.31, 27.84, 25.06, 23.31,     25.62, 46.05, 47.32, 34.03, 41.31, 31.16, 24.52, 27.01, 41.74,     21.8, 32.54, 25.95, 24.71, 32.61, 45.04, 43.56, 41.18, 44.19,     46.26, 28.96, 31.94, 31.92, 27.74, 21.44, 23.49, 43.42, 46.12,     23.27, 29.81, 46.4, 45.25, 41.12, 28.13, 43.69, 47.2), pop75 = c(2.87,     4.41, 4.43, 1.67, 0.83, 2.85, 1.34, 0.67, 1.06, 1.14, 3.93,     1.19, 2.37, 4.7, 3.35, 3.1, 0.87, 0.58, 3.08, 0.96, 4.19,     3.48, 1.91, 0.91, 3.73, 2.47, 3.67, 3.25, 3.17, 1.21, 1.2,     1.05, 1.28, 1.12, 2.85, 2.28, 1.52, 2.87, 4.54, 3.73, 1.08,     1.21, 4.46, 3.43, 0.9, 0.56, 1.73, 2.72, 2.07, 0.66), dpi = c(2329.68,     1507.99, 2108.47, 189.13, 728.47, 2982.88, 662.86, 289.52,     276.65, 471.24, 2496.53, 287.77, 1681.25, 2213.82, 2457.12,     870.85, 289.71, 232.44, 1900.1, 88.94, 1139.95, 1390, 1257.28,     207.68, 2449.39, 601.05, 2231.03, 1740.7, 1487.52, 325.54,     568.56, 220.56, 400.06, 152.01, 579.51, 651.11, 250.96, 768.79,     3299.49, 2630.96, 389.66, 249.87, 1813.93, 4001.89, 813.39,     138.33, 380.47, 766.54, 123.58, 242.69), ddpi = c(2.87, 3.93,     3.82, 0.22, 4.56, 2.43, 2.67, 6.51, 3.08, 2.8, 3.99, 2.19,     4.32, 4.52, 3.44, 6.28, 1.48, 3.19, 1.12, 1.54, 2.99, 3.54,     8.21, 5.81, 1.57, 8.12, 3.62, 7.66, 1.76, 2.48, 3.61, 1.03,     0.67, 2, 7.48, 2.19, 2, 4.35, 3.01, 2.7, 2.96, 1.13, 2.01,     2.45, 0.53, 5.14, 10.23, 1.88, 16.71, 5.08)), terms = sr ~         pop15 + pop75 + dpi + ddpi, row.names = c(\"Australia\",     \"Austria\", \"Belgium\", \"Bolivia\", \"Brazil\", \"Canada\", \"Chile\",     \"China\", \"Colombia\", \"Costa Rica\", \"Denmark\", \"Ecuador\",     \"Finland\", \"France\", \"Germany\", \"Greece\", \"Guatamala\", \"Honduras\",     \"Iceland\", \"India\", \"Ireland\", \"Italy\", \"Japan\", \"Korea\",     \"Luxembourg\", \"Malta\", \"Norway\", \"Netherlands\", \"New Zealand\",     \"Nicaragua\", \"Panama\", \"Paraguay\", \"Peru\", \"Philippines\",     \"Portugal\", \"South Africa\", \"South Rhodesia\", \"Spain\", \"Sweden\",     \"Switzerland\", \"Turkey\", \"Tunisia\", \"United Kingdom\", \"United States\",     \"Venezuela\", \"Zambia\", \"Jamaica\", \"Uruguay\", \"Libya\", \"Malaysia\"    ), class = \"data.frame\")), class = \"lm\")): could not find function \"infl_like\""},{"path":"/reference/get_jackknife_after.html","id":null,"dir":"Reference","previous_headings":"","what":"Jackknife After-Bootstrap — get_jackknife_after","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"Detects influential nodes network jackknife--bootstrap algorithm.","code":""},{"path":"/reference/get_jackknife_after.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"","code":"get_jackknife_after(   network,   boot.result,   quant,   func.name,   package.name = NULL,   func.args = NULL,   nodes = NULL )"},{"path":"/reference/get_jackknife_after.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"network igraph object representing original network. boot.result list bootstrap network samples, produced bootstrap_ function. quant numeric value length 2 specifying upper quantile used flag influential nodes (e.g.,  0.95). func.name character string specifying centrality function applied (e.g., \"degree\", \"betweenness\"). See get_centrality details. package.name (Optional) character string specifying package containing func.name. See get_centrality details. func.args (Optional) list additional arguments func.name.See get_centrality details. nodes (Optional) vector node names run JaB algorithm . NULL, algorithm run \\(n\\) nodes.","code":""},{"path":"/reference/get_jackknife_after.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"data frame containing: Node_Number: Numeric IDs nodes. Node_Name: Name nodes. Orig_Stat: original centrality statistic node. Upper_Quantile: Upper quantile jackknife--bootstrap distribution centrality statistic node. Influential: Logical indicating node influential, .e. Orig_Stat greater Upper_Quantile? Influential: Logical indicating bootstrap samples include node, meaning jackknife-sample generate distribution centrality statistics networks contain node. FALSE, bootstrap samples contained node Upper_Quantile column generally NA. many nodes FALSE mean bootstrap method poorly tuned sampling nodes appropriate data set. nodes FALSE mean bootstrap method poorly tuned data set, mean node extremely influential highly improbable generate bootstrap sample contain node. explanation appropriate depends data set bootstrap method used.","code":""},{"path":"/reference/get_jackknife_after.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"function performs jackknife -bootstrap procedure node network. OUTLINE ALGORITHM","code":""},{"path":"/reference/get_jackknife_after.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jackknife After-Bootstrap — get_jackknife_after","text":"","code":"#add example later"},{"path":"/reference/get_largest_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Largest Component of a Network — get_largest_component","title":"Find Largest Component of a Network — get_largest_component","text":"function takes igraph network object returns igraph object largest connected component.","code":""},{"path":"/reference/get_largest_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Largest Component of a Network — get_largest_component","text":"","code":"get_largest_component(network)"},{"path":"/reference/get_largest_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Largest Component of a Network — get_largest_component","text":"network igraph object.","code":""},{"path":"/reference/get_largest_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Largest Component of a Network — get_largest_component","text":"igraph object largest connected component network. network already connected, function returns input network unchanged.","code":""},{"path":"/reference/get_largest_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Largest Component of a Network — get_largest_component","text":"","code":"library(igraph) #unconnected network data(\"hamster\") is.connected(hamster) #> [1] FALSE get_largest_component(hamster) #> IGRAPH 9a6caaf UN-- 1 0 --  #> + attr: name (v/c) #> + edges from 9a6caaf (vertex names):  #connected network data(\"karate\") is.connected(karate) #> [1] TRUE get_largest_component(karate) #> IGRAPH 4b458a1 UNW- 34 78 -- Zachary's karate club network #> + attr: name (g/c), Citation (g/c), Author (g/c), Faction (v/n), name #> | (v/c), label (v/c), color (v/n), weight (e/n) #> + edges from 4b458a1 (vertex names): #>  [1] Mr Hi  --Actor 2  Mr Hi  --Actor 3  Mr Hi  --Actor 4  Mr Hi  --Actor 5  #>  [5] Mr Hi  --Actor 6  Mr Hi  --Actor 7  Mr Hi  --Actor 8  Mr Hi  --Actor 9  #>  [9] Mr Hi  --Actor 11 Mr Hi  --Actor 12 Mr Hi  --Actor 13 Mr Hi  --Actor 14 #> [13] Mr Hi  --Actor 18 Mr Hi  --Actor 20 Mr Hi  --Actor 22 Mr Hi  --Actor 32 #> [17] Actor 2--Actor 3  Actor 2--Actor 4  Actor 2--Actor 8  Actor 2--Actor 14 #> [21] Actor 2--Actor 18 Actor 2--Actor 20 Actor 2--Actor 22 Actor 2--Actor 31 #> [25] Actor 3--Actor 4  Actor 3--Actor 8  Actor 3--Actor 9  Actor 3--Actor 10 #> + ... omitted several edges"},{"path":"/reference/get_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Node Names from a Network Object — get_nodes","title":"Node Names from a Network Object — get_nodes","text":"Extracts names nodes (vertices) network object. internal use network types JaB package","code":""},{"path":"/reference/get_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node Names from a Network Object — get_nodes","text":"","code":"get_nodes(network)"},{"path":"/reference/get_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node Names from a Network Object — get_nodes","text":"network network object \\(n\\) nodes. Network can represented matrix, dgCMatrix edgelist, igraph). See make_network_type details.","code":""},{"path":"/reference/get_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Node Names from a Network Object — get_nodes","text":"vector node names. node names assigned, returns sequence integers 1 \\(n\\).","code":""},{"path":[]},{"path":"/reference/get_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node Names from a Network Object — get_nodes","text":"","code":"data(paul.revere) get_nodes(paul.revere) #>   [1] \"Adams.John\"            \"Adams.Samuel\"          \"Allen.Dr\"              #>   [4] \"Appleton.Nathaniel\"    \"Ash.Gilbert\"           \"Austin.Benjamin\"       #>   [7] \"Austin.Samuel\"         \"Avery.John\"            \"Baldwin.Cyrus\"         #>  [10] \"Ballard.John\"          \"Barber.Nathaniel\"      \"Barnard.Samuel\"        #>  [13] \"Barrett.Samuel\"        \"Bass.Henry\"            \"Bell.William\"          #>  [16] \"Blake.Increase\"        \"Boit.John\"             \"Bolter.Thomas\"         #>  [19] \"Boyer.Peter\"           \"Boynton.Richard\"       \"Brackett.Jos\"          #>  [22] \"Bradford.John\"         \"Bradlee.David\"         \"Bradlee.Josiah\"        #>  [25] \"Bradlee.Nathaniel\"     \"Bradlee.Thomas\"        \"Bray.George\"           #>  [28] \"Breck.William\"         \"Bewer.James\"           \"Brimmer.Herman\"        #>  [31] \"Brimmer.Martin\"        \"Broomfield.Henry\"      \"Brown.Hugh\"            #>  [34] \"Brown.Enoch\"           \"Brown.John\"            \"Bruce.Stephen\"         #>  [37] \"Burbeck.Edward\"        \"Burbeck.William\"       \"Burt.Benjamin\"         #>  [40] \"Burton.Benjamin\"       \"Cailleteau.Edward\"     \"Callendar.Elisha\"      #>  [43] \"Campbell.Nicholas\"     \"Cazneau.Capt\"          \"Chadwell.Mr\"           #>  [46] \"Champney.Caleb\"        \"Chase.Thomas\"          \"Cheever.Ezekiel\"       #>  [49] \"Chipman.Seth\"          \"Chrysty.Thomas\"        \"Church.Benjamin\"       #>  [52] \"Clarke.Benjamin\"       \"Cleverly.Stephen\"      \"Cochran.John\"          #>  [55] \"Colesworthy.Gilbert\"   \"Collier.Gershom\"       \"Collins.Ezra\"          #>  [58] \"Collson.Adam\"          \"Condy.JamesFoster\"     \"Cooper.Samuel\"         #>  [61] \"Cooper.William\"        \"Crafts.Thomas\"         \"Crane.John\"            #>  [64] \"Davis.Caleb\"           \"Davis.Edward\"          \"Davis.Robert\"          #>  [67] \"Davis.William\"         \"Dawes.Thomas\"          \"Dennie.William\"        #>  [70] \"Deshon.Moses\"          \"Dexter.Samuel\"         \"Dolbear.Edward\"        #>  [73] \"Doyle.Peter\"           \"Eaton.Joseph\"          \"Eayres.Joseph\"         #>  [76] \"Eckley.Unknown\"        \"Edes.Benjamin\"         \"Emmes.Samuel\"          #>  [79] \"Etheridge.William\"     \"Fenno.Samuel\"          \"Ferrell.Ambrose\"       #>  [82] \"Field.Joseph\"          \"Flagg.Josiah\"          \"Fleet.Thomas\"          #>  [85] \"Foster.Bos\"            \"Foster.Samuel\"         \"Frothingham.Nathaniel\" #>  [88] \"Gammell.John\"          \"Gill.Moses\"            \"Gore.Samuel\"           #>  [91] \"Gould.William\"         \"Graham.James\"          \"Grant.Moses\"           #>  [94] \"Gray.Wait\"             \"Greene.Nathaniel\"      \"Greenleaf.Joseph\"      #>  [97] \"Greenleaf.William\"     \"Greenough.Newn\"        \"Ham.William\"           #> [100] \"Hammond.Samuel\"        \"Hancock.Eben\"          \"Hancock.John\"          #> [103] \"Hendley.William\"       \"Hewes.George\"          \"Hickling.William\"      #> [106] \"Hicks.John\"            \"Hill.Alexander\"        \"Hitchborn.Nathaniel\"   #> [109] \"Hitchborn.Thomas\"      \"Hobbs.Samuel\"          \"Hoffins.John\"          #> [112] \"Holmes.Nathaniel\"      \"Hooton.John\"           \"Hopkins.Caleb\"         #> [115] \"Hoskins.William\"       \"Howard.Samuel\"         \"Howe.Edward\"           #> [118] \"Hunnewell.Jonathan\"    \"Hunnewell.Richard\"     \"Hunstable.Thomas\"      #> [121] \"Hunt.Abraham\"          \"Ingersoll.Daniel\"      \"Inglish.Alexander\"     #> [124] \"Isaac.Pierce\"          \"Ivers.James\"           \"Jarvis.Edward\"         #> [127] \"Jarvis.Charles\"        \"Jefferds.Unknown\"      \"Jenkins.John\"          #> [130] \"Johnston.Eben\"         \"Johonnott.Gabriel\"     \"Kent.Benjamin\"         #> [133] \"Kerr.Walter\"           \"Kimball.Thomas\"        \"Kinnison.David\"        #> [136] \"Lambert.John\"          \"Lee.Joseph\"            \"Lewis.Phillip\"         #> [139] \"Lincoln.Amos\"          \"Loring.Matthew\"        \"Lowell.John\"           #> [142] \"Machin.Thomas\"         \"Mackay.William\"        \"MacKintosh.Capt\"       #> [145] \"MacNeil.Archibald\"     \"Marett.Phillip\"        \"Marlton.John\"          #> [148] \"Marshall.Thomas\"       \"Marson.John\"           \"Mason.Jonathan\"        #> [151] \"Matchett.John\"         \"May.John\"              \"McAlpine.William\"      #> [154] \"Melville.Thomas\"       \"Merrit.John\"           \"Milliken.Thomas\"       #> [157] \"Molineux.William\"      \"Moody.Samuel\"          \"Moore.Thomas\"          #> [160] \"Morse.Anthony\"         \"Morton.Perez\"          \"Mountford.Joseph\"      #> [163] \"Newell.Eliphelet\"      \"Nicholls.Unknown\"      \"Noyces.Nat\"            #> [166] \"Obear.Israel\"          \"Otis.James\"            \"Palfrey.William\"       #> [169] \"Palmer.Joseph\"         \"Palms.Richard\"         \"Parker.Jonathan\"       #> [172] \"Parkman.Elias\"         \"Partridge.Sam\"         \"Payson.Joseph\"         #> [175] \"Pearce.IsaacJun\"       \"Pearce.Isaac\"          \"Peck.Samuel\"           #> [178] \"Peck.Thomas\"           \"Peters.John\"           \"Phillips.John\"         #> [181] \"Phillips.Samuel\"       \"Phillips.William\"      \"Pierce.William\"        #> [184] \"Pierpont.Robert\"       \"Pitts.John\"            \"Pitts.Lendall\"         #> [187] \"Pitts.Samuel\"          \"Porter.Thomas\"         \"Potter.Edward\"         #> [190] \"Powell.William\"        \"Prentiss.Henry\"        \"Prince.John\"           #> [193] \"Prince.Job\"            \"Proctor.Edward\"        \"Pulling.John\"          #> [196] \"Pulling.Richard\"       \"Purkitt.Henry\"         \"Quincy.Josiah\"         #> [199] \"Randall.John\"          \"Revere.Paul\"           \"Roby.Joseph\"           #> [202] \"Roylson.Thomas\"        \"Ruddock.Abiel\"         \"Russell.John\"          #> [205] \"Russell.William\"       \"Sessions.Robert\"       \"Seward.James\"          #> [208] \"Sharp.Gibbens\"         \"Shed.Joseph\"           \"Sigourney.John\"        #> [211] \"Simpson.Benjamin\"      \"Slater.Peter\"          \"Sloper.Ambrose\"        #> [214] \"Smith.John\"            \"Spear.Thomas\"          \"Sprague.Samuel\"        #> [217] \"Spurr.John\"            \"Stanbridge.Henry\"      \"Starr.James\"           #> [220] \"Stearns.Phineas\"       \"Stevens.Ebenezer\"      \"Stoddard.Asa\"          #> [223] \"Stoddard.Jonathan\"     \"Story.Elisha\"          \"Swan.James\"            #> [226] \"Sweetser.John\"         \"Symmes.Eben\"           \"Symmes.John\"           #> [229] \"Tabor.Philip\"          \"Tileston.Thomas\"       \"Trott.George\"          #> [232] \"Tyler.Royall\"          \"Urann.Thomas\"          \"Vernon.Fortesque\"      #> [235] \"Waldo.Benjamin\"        \"Warren.Joseph\"         \"Webb.Joseph\"           #> [238] \"Webster.Thomas\"        \"Welles.Henry\"          \"Wendell.Oliver\"        #> [241] \"Wheeler.Josiah\"        \"White.Samuel\"          \"Whitten.John\"          #> [244] \"Whitwell.Samuel\"       \"Whitwell.William\"      \"Williams.Jeremiah\"     #> [247] \"Williams.Jonathan\"     \"Williams.Thomas\"       \"Willis.Nathaniel\"      #> [250] \"Wingfield.William\"     \"Winslow.John\"          \"Winthrop.John\"         #> [253] \"Wyeth.Joshua\"          \"Young.Thomas\""},{"path":"/reference/hamster.html","id":null,"dir":"Reference","previous_headings":"","what":"Pester Hamster Network — hamster","title":"Pester Hamster Network — hamster","text":"Friendship network among users hamsterster.com Rossi Ahmed (2015)","code":""},{"path":"/reference/hamster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pester Hamster Network — hamster","text":"","code":"hamster"},{"path":"/reference/hamster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pester Hamster Network — hamster","text":"undirected igraph graph object. Nodes individual accounts hamsterster.com edge present two nodes respective accounts friends.","code":""},{"path":"/reference/hamster.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pester Hamster Network — hamster","text":"https://networkrepository.com/petster-hamster.php","code":""},{"path":"/reference/hamster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pester Hamster Network — hamster","text":"Rossi RA, Ahmed NK (2015). “Network Data Repository Interactive Graph Analytics Visualization.” AAAI. https://networkrepository.com.","code":""},{"path":"/reference/hamster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pester Hamster Network — hamster","text":"","code":"data(\"hamster\") set.seed(600) plot(hamster, vertex.label = NA, vertex.size = 3)"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/jab_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","title":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","text":"ADD DESCRIPTION - add something default 0.05-0.95 .e. center 90%- default B =3100 ADD CITATIONS","code":""},{"path":"/reference/jab_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","text":"","code":"jab_lm(   mod,   stat = \"rstudent\",   quant.lower = 0.05,   quant.upper = 0.95,   B = 3100,   package.name = NULL,   stat.args = NULL )"},{"path":"/reference/jab_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","text":"mod lm object. Output lmstats. stat character string function name used calculate desired centrality statistic. function must input lm model object first argument output length \\(n\\) vector statistic interest. quant.lower numeric 0 1 used lower cutoff JaB algorithm. Default 0.05. Must smaller quant.upper. quant.upper numeric 0 1 used upper cutoff JaB algorithm. Default 0.95. Must larger quant.lower. B Number bootstrap samples. Default 3100 package.name character string name package func.name function . left NULL function called loaded users environment. stat.args named list additional arguments func.name function may need beyond mod object.","code":""},{"path":"/reference/jab_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","text":"data frame 5 columns. \"row.ID\": Row Number observation data set used mod. \"lower\": Lower quantile cutoff determined quant.lower. \"upper\": Upper quantile cutoff determined quant.upper. \"orig\": original influence/outlier statistic calculated stat. \"influential\": Logical flagging observation influential . TRUE orig < lower orig > upper. FALSE otherwise.","code":""},{"path":"/reference/jab_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jackknife-after-Bootstrap for Linear Regression — jab_lm","text":"","code":"library(stats) data(\"LifeCycleSavings\")  mod <- lm(sr ~ ., data = LifeCycleSavings)  # JaB with DFFITS result1 <- jab_lm(mod,                   stat = \"dffits\",                   quant.lower = 0.025,                   quant.upper = 0.975,                   B = 3100) result1[result1$influential, ] #>        row.ID      lower     upper       orig influential #> Japan      23 -0.5962788 0.6242944  0.8596508        TRUE #> Zambia     46 -0.6127221 0.6599902  0.7482351        TRUE #> Libya      49 -0.5972119 0.6806704 -1.1601334        TRUE   #define the likelihood distance as influence statistic ## NEED TO CITE infl_like <- function(mod){    n <- length(mod$fitted.values)   p <- length(mod$coefficients)    ti <- rstudent(mod)   h <- hatvalues(mod)    p1 <- log( (n/(n-1)) * ((n-p-1) / (ti^2 +n-p-1)) )   p2 <- ti^2 * (n-1) / (1-h) / (n-p-1)    return(n*p1 + p2 - 1) }  ## JaB with Likelihood Distance result2 <- jab_lm(mod,                   stat = \"infl_like\",                   quant.lower = 0.00,                   quant.upper = 0.95,                   B = 3100) #> Error in jab_lm(mod, stat = \"infl_like\", quant.lower = 0, quant.upper = 0.95,     B = 3100): The functioninfl_likedoes not exist in your environment. result2[result2$influential, ] #> Error in eval(expr, envir, enclos): object 'result2' not found"},{"path":"/reference/karate.html","id":null,"dir":"Reference","previous_headings":"","what":"Zachary's karate club network — karate","title":"Zachary's karate club network — karate","text":"Social network members university karate club, led   president John . karate instructor Mr. Hi (pseudonyms). edge weights number common activities club   members took part . activities : Association academic classes university. Membership Mr. Hi's private karate studio east side     city Mr. Hi taught nights part-time instructor. Membership Mr. Hi's private karate studio east side     city, many supporters worked weekends. Student teaching east-side karate studio referred     (2). different (2) student teachers interacted     , prohibited interacting     students. Interaction university rathskeller, located     basement karate club's workout area. Interaction student-oriented bar located across     street university campus. Attendance open karate tournaments held area     private karate studios. Attendance intercollegiate karate tournaments held local     universities. Since open intercollegiate tournaments     held Saturdays, attendance impossible. Zachary studied conflict fission network, karate   club split two separate clubs, long disputes   two factions club, one led John ., Mr. Hi. ‘Faction’ vertex attribute gives faction memberships   actors. split club, club members chose   new clubs based factions, except actor . 9, John   .'s faction chose Mr. Hi's club.","code":""},{"path":"/reference/karate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Zachary's karate club network — karate","text":"data set documentation directly igraphdata package.","code":""},{"path":"/reference/karate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Zachary's karate club network — karate","text":"Csárdi G, Horvát S, Müller K, Salmon M (2015). igraphdata: Collection Network Data Sets 'igraph' Package. R package version 1.0.1, https://CRAN.R-project.org/package=igraphdata. Zachary WW (1977). “information flow model conflict fission small groups.” Journal Anthropological Research, 33(4), 452--473.","code":""},{"path":"/reference/make_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Object to an igraph Graph — make_igraph","title":"Convert an Object to an igraph Graph — make_igraph","text":"Converts object specified type (e.g., adjacency matrix, edgelist) igraph graph object. Supported input types include `igraph`, `matrix`, `sparsematrix`, `edgelist`.","code":""},{"path":"/reference/make_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Object to an igraph Graph — make_igraph","text":"","code":"make_igraph(obj, obj.type, mode = \"undirected\", weighted = NULL)"},{"path":"/reference/make_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Object to an igraph Graph — make_igraph","text":"obj Object output `bootstrap_` functions. Must type `igraph`, `matrix`, `sparsematrix`, `edgelist`. obj.type character string specifying type `obj`. Options include `\"igraph\"`, `\"matrix\"`, `\"sparsematrix\"`, `\"edgelist\"`. `output.type` parameter `bootstrap_` function. mode character string specifying whether graph `directed`, `undirected`, `max`, `min`, `upper`, `lower`, `plus`). Defaults `undirected`. See `igraph::graph_from_adjacency_matrix` details. weighted logical indicating graph weighted. `NULL`, weights added. Defaults `NULL`.","code":""},{"path":"/reference/make_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Object to an igraph Graph — make_igraph","text":"igraph object representing graph.","code":""},{"path":"/reference/make_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Object to an igraph Graph — make_igraph","text":"","code":"# For an adjacency matrix #adj_matrix <- matrix(c(0, 1, 1, 0), nrow = 2) #make_igraph(adj_matrix, obj.type = \"matrix\")  # For an edge list #edge_list <- matrix(c(1, 2, 2, 3), ncol = 2) #make_igraph(edge_list, obj.type = \"edgelist\", mode = \"directed\")"},{"path":"/reference/make_network_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Network Objects to New Type — make_network_type","title":"Convert Network Objects to New Type — make_network_type","text":"Converts input list networks various representations: matrix, dgCMatrix, edgelist, igraph.","code":""},{"path":"/reference/make_network_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Network Objects to New Type — make_network_type","text":"","code":"make_network_type(obj, input.type, output.type)"},{"path":"/reference/make_network_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Network Objects to New Type — make_network_type","text":"obj list network objects, must match input.type specified. input.type character string specifying input type obj. Options include \"igraph\", \"matrix\", \"dgCMatrix\", \"edgelist\". output.type character string specifying desired output type. Options \"igraph\", \"matrix\", \"dgCMatrix\", \"edgelist\".","code":""},{"path":"/reference/make_network_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Network Objects to New Type — make_network_type","text":"converted list network objects specified output.type format.","code":""},{"path":"/reference/make_network_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Network Objects to New Type — make_network_type","text":"function converts network obj specified output.type. Conversion logic applied based input.type output.type. input.type output.type , obj returned . Conversions adjacency matrices igraph objects handled via igraph::graph_from_adjacency_matrix. Conversions igraph objects edge lists handled igraph::as_edgelist. Conversions igraph objects adjacency matrices handled igraph::as_adjacency_matrix. Networks \\(n\\) nodes can represented , \"igraph\": igraph object \"matrix\": \\(n\\)--\\(n\\) adjacency matrix, class \"matrix\" \"dgCMatrix\": \\(n\\)--\\(n\\) adjacency matrix sparse matrix, class {dgCMatrix}, see Matrix package details \"edgelist\": \\(\\binom{n}{2}\\)--2 matrix row pair nodes edge attached use \"dgCMatrix\" input.type output.type, package Matrix must installed.","code":""},{"path":[]},{"path":"/reference/make_network_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Network Objects to New Type — make_network_type","text":"","code":"# Convert list of adjacency matrices to igraph objects one_matrix <- matrix(c(0, 1, 1, 1, 0, 0, 1, 0, 0), nrow = 3, byrow = TRUE) matrix_list <- replicate(3, one_matrix, simplify = FALSE) igraph_list <-   make_network_type(matrix_list,                    input.type = \"matrix\",                    output.type = \"igraph\")  # Same thing now using detect type type <- detect_type(matrix_list) type #> [1] \"matrix\" igraph_list <-   make_network_type(matrix_list,                    input.type = type,                    output.type = \"igraph\")  # Convert list of igraph objects to sparse matrix sparsematrix_list <-   make_network_type(igraph_list,                     input.type = \"igraph\",                     output.type = \"dgCMatrix\") detect_type(sparsematrix_list) #> [1] \"dgCMatrix\""},{"path":"/reference/mallow_equiv_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Equivalence Test of Two Vectors Using Mallows Distance — mallow_equiv_test","title":"Equivalence Test of Two Vectors Using Mallows Distance — mallow_equiv_test","text":"Conduct equivalence test using \\(p^{\\text{th}}\\) Mallows distance found Munk Czado (1998)","code":""},{"path":"/reference/mallow_equiv_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equivalence Test of Two Vectors Using Mallows Distance — mallow_equiv_test","text":"","code":"mallow_equiv_test(vec1, vec2, alpha, delta0)"},{"path":"/reference/mallow_equiv_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equivalence Test of Two Vectors Using Mallows Distance — mallow_equiv_test","text":"vec1 numeric vector. vec2 numeric vector length vec1. alpha Trimming parameter \\(\\alpha \\(0, 0.5)\\) trimmed Mallows' distance. delta0 Tolerance value hypothesis test.","code":""},{"path":"/reference/mallow_equiv_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equivalence Test of Two Vectors Using Mallows Distance — mallow_equiv_test","text":"Add details ","code":""},{"path":"/reference/mallows_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Mallows Distance Between Two Vectors — mallows_distance","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"Calculate \\(p^{\\text{th}}\\) Mallows distance two vectors, also known Wasserstein-\\(p\\) distance.","code":""},{"path":"/reference/mallows_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"","code":"mallows_distance(vec1, vec2, p = 2)"},{"path":"/reference/mallows_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"vec1 numeric vector. vec2 numeric vector length vec1. p number \\(\\geq 1\\) \\(p^{\\text{th}}\\) Mallows distance. Default 2.","code":""},{"path":"/reference/mallows_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"numeric value representing \\(p^{\\text{th}}\\) Mallows distance vec1 vec2.","code":""},{"path":"/reference/mallows_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"Calculate \\(p^{\\text{th}}\\) Mallows distance two vectors, also known Wasserstein-\\(p\\) distance two samples size. Say \\(X_i \\overset{\\text{iid}}{\\sim} F\\) \\(Y_j \\overset{\\text{iid}}{\\sim} G\\). Let \\(\\hat{F}(x) = \\sum_i\\boldsymbol{1}(X_i \\leq x)\\) \\(\\hat{F}^{-1}(t) = \\text{inf}\\{x : \\hat{F}(x) \\leq t\\}\\). Define \\(\\hat{G}(y)\\) \\(\\hat{G}^{-1}(t)\\) similarly. \\(p^{\\text{th}}\\) Mallows distance \\(\\hat{F}(x)\\) \\(\\hat{G}(t)\\)  \\(\\Psi_{p} (\\hat{F}, \\hat{G}) = \\left(\\int_{0}^{1} |\\hat{F}^{-1}(t) - \\hat{G}^{-1}(t) |^p dt \\right)^{1/p}\\)","code":""},{"path":"/reference/mallows_distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"Mallows CL (1972). “note asymptotic joint normality.” Annals Mathematical Statistics, 508--515. Munk , Czado C (1998). “Nonparametric validation similar distributions assessment goodness fit.” Journal Royal Statistical Society Series B: Statistical Methodology, 60(1), 223--241.","code":""},{"path":[]},{"path":"/reference/mallows_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mallows Distance Between Two Vectors — mallows_distance","text":"","code":"library(igraph) data(\"karate\") set.seed(1) boot.sample <- bootstrap_latent_space(karate, d = 2, B = 1)  orig.degree <- get_centrality(karate, \"degree\") boot.degree <- get_centrality(boot.sample[[1]], \"degree\")  mallows_distance(orig.degree, boot.degree) #> [1] 1.608799"},{"path":"/reference/mallows_distance_trimmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"Calculate trimmed \\(p^{\\text{th}}\\) Mallows distance two vectors, also known trimmed Wasserstein-\\(p\\) distance.","code":""},{"path":"/reference/mallows_distance_trimmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"","code":"mallows_distance_trimmed(vec1, vec2, p = 2, alpha = 0)"},{"path":"/reference/mallows_distance_trimmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"vec1 numeric vector. vec2 numeric vector length vec1. p number \\(\\geq 1\\) \\(p^{\\text{th}}\\) Mallows distance. Default 2. alpha trimming parameter \\([0, 0.5)\\). alpha=0 (default), trimming result just Mallows distance.","code":""},{"path":"/reference/mallows_distance_trimmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"numeric value representing \\(p^{\\text{th}}\\) Mallows distance vec1 vec2.","code":""},{"path":"/reference/mallows_distance_trimmed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"Calculate trimmed \\(p^{\\text{th}}\\) Mallows distance two vectors, also known trimmed Wasserstein-\\(p\\) distance two samples size. Say \\(X_i \\overset{\\text{iid}}{\\sim} F\\) \\(Y_j \\overset{\\text{iid}}{\\sim} G\\). Let \\(\\hat{F}(x) = \\sum_i\\boldsymbol{1}(X_i \\leq x)\\) \\(\\hat{F}^{-1}(t) = \\text{inf}\\{x : \\hat{F}(x) \\leq t\\}\\). Define \\(\\hat{G}(y)\\) \\(\\hat{G}^{-1}(t)\\) similarly. Let \\(\\alpha\\[0,0/5)\\) trimming parameter. trimmed \\(p^{\\text{th}}\\) Mallows distance \\(\\hat{F}(x)\\) \\(\\hat{G}(t)\\)  \\(\\Psi_{\\alpha, p}(\\hat{F}, \\hat{G}) = \\left( \\frac{1}{1-2\\alpha}\\int_{\\alpha}^{1-\\alpha} |\\hat{F}^{-1}(t) - \\hat{G}^{-1}(t) |^p dt \\right)^{1/p}\\)","code":""},{"path":"/reference/mallows_distance_trimmed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"Mallows CL (1972). “note asymptotic joint normality.” Annals Mathematical Statistics, 508--515. Munk , Czado C (1998). “Nonparametric validation similar distributions assessment goodness fit.” Journal Royal Statistical Society Series B: Statistical Methodology, 60(1), 223--241.","code":""},{"path":[]},{"path":"/reference/mallows_distance_trimmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trimmed Mallows Distance Between Two Vectors — mallows_distance_trimmed","text":"","code":"library(igraph) data(\"karate\") set.seed(1) boot.sample <- bootstrap_latent_space(karate, d = 2, B = 1)  orig.degree <- get_centrality(karate, \"degree\") boot.degree <- get_centrality(boot.sample[[1]], \"degree\")  mallows_distance(orig.degree, boot.degree) #> [1] 1.608799 mallows_distance_trimmed(orig.degree, boot.degree, alpha = 1/34) #> [1] 1.699609 mallows_distance_trimmed(orig.degree, boot.degree, alpha = 2/34) #> [1] 1.51804"},{"path":"/reference/paul.revere.groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Paul Revere Groups Network — paul.revere.groups","title":"Paul Revere Groups Network — paul.revere.groups","text":"Association network groups involved paul.revere network comprised leaders American Revolution Boston area.","code":""},{"path":"/reference/paul.revere.groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paul Revere Groups Network — paul.revere.groups","text":"","code":"paul.revere.groups"},{"path":"/reference/paul.revere.groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paul Revere Groups Network — paul.revere.groups","text":"undirected igraph graph object. Vertex Attributes: \"name\": Name group \"members\": list people paul.revere known members group Edge Attributes: \"weight\": edge weight, people members groups \"shared.members\": vector length weight stating people members groups","code":""},{"path":"/reference/paul.revere.groups.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paul Revere Groups Network — paul.revere.groups","text":"Data originally published Fischer (1994)  electronically published GitHub Healy (2017) . Also found Han (2009) .","code":""},{"path":"/reference/paul.revere.groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paul Revere Groups Network — paul.revere.groups","text":"network includes seven groups 254 men paul.revere network involved :  Masonic lodge met Green Dragon Tavern; Loyal Nine, nucleus Sons Liberty; North Caucus met Salutation Tavern; Long Room Club Dassett Alley; Boston Committee Correspondence; men known participated Boston Tea Party; Whig leaders Tory Enemies List. Nodes network groups. edge exists two groups least one person member groups, edge weight number people members groups (e.g. Thomas Crafts Henry Welles members St. Andrews Lodge Loyal Nine, edge weight two St. Andrews Lodge Loyal Nine. people Loyal Nine Long Room Club edge ).","code":""},{"path":"/reference/paul.revere.groups.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Paul Revere Groups Network — paul.revere.groups","text":"Fischer DH (1994). Paul Revere's Ride. Oxford University Press. Han SK (2009). “ride Paul Revere: brokerage role making American revolution.” Mobilization: International Quarterly, 14(2), 143--162. doi:10.17813/maiq.14.2.g360870167085210 . Healy K (2017). “Using Metadata find Paul Revere.” https://kieranhealy.org/blog/archives/2013/06/09/using-metadata--find-paul-revere/. Accessed: 2024-11-01, https://github.com/kjhealy/revere?tab=readme-ov-file.","code":""},{"path":"/reference/paul.revere.groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paul Revere Groups Network — paul.revere.groups","text":"","code":"data(\"paul.revere.groups\") set.seed(600) plot(paul.revere.groups,      edge.width = igraph::E(paul.revere.groups)$weight)"},{"path":"/reference/paul.revere.html","id":null,"dir":"Reference","previous_headings":"","what":"Paul Revere Network — paul.revere","title":"Paul Revere Network — paul.revere","text":"Association network Paul Revere leaders American Revolution Boston area.","code":""},{"path":"/reference/paul.revere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paul Revere Network — paul.revere","text":"","code":"paul.revere"},{"path":"/reference/paul.revere.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paul Revere Network — paul.revere","text":"undirected igraph graph object. Vertex Attributes: \"name\": Names individuals \"Surname.Firstname\" \"StAndrewsLodge\": Logical, individual member St Andrews Lodge? \"LoyalNine\": Logical, individual member Loyal Nine? \"NorthCaucus\": Logical, individual member North End Caucus? \"LongRoomClub\": Logical, individual member Long Room Club? \"TeaParty\": Logical, individual participate Boston Tea Party? \"BostonCommittee\": Logical, individual member Boston Committee? \"LondonEnemies\": Logical, individual Whig leader Tory enemies list? Edge Attributes: \"weight\": edge weight, number shared organizational memberships two individuals \"membership\": vector length weight stating organizations two individuals members .","code":""},{"path":"/reference/paul.revere.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paul Revere Network — paul.revere","text":"Data originally published Fischer (1994)  electronically published GitHub Healy (2017) . Also found Han (2009) .","code":""},{"path":"/reference/paul.revere.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paul Revere Network — paul.revere","text":"network includes total 254 men involved Boston's revolutionary movement. man member one (several) following seven groups: Masonic lodge met Green Dragon Tavern; Loyal Nine, nucleus Sons Liberty; North Caucus met Salutation Tavern; Long Room Club Dassett Alley; Boston Committee Correspondence; men known participated Boston Tea Party; Whig leaders Tory Enemies List. Nodes network men. edge present two men members group. edge weight number groups members . (e.g. John Adams Dr. Allen part North Caucus edge weight one. John Bradford William Powell members Boston Committee London Enemies edge weight two.)","code":""},{"path":"/reference/paul.revere.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Paul Revere Network — paul.revere","text":"Fischer DH (1994). Paul Revere's Ride. Oxford University Press. Han SK (2009). “ride Paul Revere: brokerage role making American revolution.” Mobilization: International Quarterly, 14(2), 143--162. doi:10.17813/maiq.14.2.g360870167085210 . Healy K (2017). “Using Metadata find Paul Revere.” https://kieranhealy.org/blog/archives/2013/06/09/using-metadata--find-paul-revere/. Accessed: 2024-11-01, https://github.com/kjhealy/revere?tab=readme-ov-file.","code":""},{"path":"/reference/paul.revere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paul Revere Network — paul.revere","text":"","code":"data(\"paul.revere\") set.seed(400) plot(paul.revere, vertex.label = NA)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/sample_about_one_seed_modified.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample about one seed from snowboot package — sample_about_one_seed_modified","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"slightly modified version sample_about_one_seed snowboot package.","code":""},{"path":"/reference/sample_about_one_seed_modified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"","code":"sample_about_one_seed_modified(net, seed, n.wave = 1)"},{"path":"/reference/sample_about_one_seed_modified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"net network object described snowboot package. package seed Character string selected seed start LSMI (name node). n.wave Number waves included snowball sample","code":""},{"path":"/reference/sample_about_one_seed_modified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"list length n.wave element edge list edges included corresponding wave sampling.","code":""},{"path":"/reference/sample_about_one_seed_modified.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"slightly modified version sample_about_one_seed snowboot package. function uses node names (node IDs), returns edge list bootstrap sample (nodes included sample). primarily used internal function bootstrap_snowboot.","code":""},{"path":"/reference/sample_about_one_seed_modified.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample about one seed from snowboot package — sample_about_one_seed_modified","text":"Ramirez-Ramirez L, Nezafati K, Chen Y, Lyubchich Y, Gel YR (2022). snowboot: Bootstrap Methods Network Inference. R package version 1.0.2, https://cran.r-project.org/web/packages/snowboot. Gel YR, Lyubchich V, Ramirez LR (2017). “Bootstrap quantification estimation uncertainties network degree distributions.” Scientific Reports, 7(1). doi:10.1038/s41598-017-05885-x .","code":""},{"path":[]},{"path":"/reference/trump.world.html","id":null,"dir":"Reference","previous_headings":"","what":"Trump World Network — trump.world","title":"Trump World Network — trump.world","text":"Association network Donald Trump associates pre-2020 inauguration compiled Buzz Feed News  .","code":""},{"path":"/reference/trump.world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trump World Network — trump.world","text":"","code":"trump.world"},{"path":"/reference/trump.world.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trump World Network — trump.world","text":"undirected igraph graph object. Vertex Attributes: \"name\": Names entity. \"EntityType\": Type entity. Person: Entity person. Federal Agency: Entity federal agency. Organization: Entity business (CORP, LLC, INC, LP, etc.), political organization (advocacy, PAC), religious organization (church, etc.) Edge Attributes: \"Connection\": relationship type two entities \"Source\": url source connection.","code":""},{"path":"/reference/trump.world.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Trump World Network — trump.world","text":"Data originally published Buzz Feed News https://github.com/BuzzFeedNews/trumpworld https://docs.google.com/spreadsheets/d/1Z5Vo5pbvxKJ5XpfALZXvCzW26Cl4we3OaN73K9Ae5Ss/edit?gid=1996904412#gid=1996904412.","code":""},{"path":"/reference/trump.world.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trump World Network — trump.world","text":"January 2017 just Donald Trump's inauguration, Buzz Feed News published article asking \"Help Us Map TrumpWorld\". documented 2,000 people organizations connected incoming Trump administration. released public call asking analysis data help learn Trump's business connections may impact administration. Nodes network entities people, organizations, federal agencies. edge present two nodes documented connection two entities (e.g. ownership, committee member, familial relationship, employee, business relationship, etc. )","code":""},{"path":"/reference/trump.world.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trump World Network — trump.world","text":"Adummy (2024). “keys package JaB avalable.” Failed insert reference keys:     trump-world package = 'JaB'. Possible cause - missing REFERENCES.bib package 'JaB' 'JaB' installed.","code":""},{"path":"/reference/trump.world.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trump World Network — trump.world","text":"","code":"data(\"trump.world\") set.seed(39082) plot(trump.world, vertex.label = NA)"}]
